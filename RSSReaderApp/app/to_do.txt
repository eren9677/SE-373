•	Fetch and parse the XML to extract:
o	Title
o	Description
•	Use a background thread to avoid blocking the UI.
✅ 2. RecyclerView for Headlines
•	Display each news title as a card.
•	Include a play/pause button.
•	Use a custom RecyclerView.Adapter.
✅ 3. Text-to-Speech (TTS)
•	On tapping the play button, read the news title and description aloud.
•	Only one item should play at a time.
•	Handle repeated taps or double speak issues gracefully (use stop() before speak()).
•	Pause button should stop the playback.
 
🧩 Example Guidance & Prompts (for ChatGPT)
Students should be instructed to ask ChatGPT smart questions. Example prompts:
•	"How do I parse an RSS feed from a URL using Kotlin?"
•	"How do I run a network operation in the background in Android?"
•	"How do I set up a RecyclerView with a custom adapter in Android?"
•	"How do I use TextToSpeech in Kotlin to read a string?"
•	"How do I prevent TTS from speaking twice?"
 
🔍 Tasks & File Responsibilities
📄 NewsItem.kt
•	Define a simple data class with title and description.
📄 RssParser.kt
•	Create a method to fetch and parse the XML feed.
•	Use XmlPullParser or other options like Jsoup.
📄 NewsAdapter.kt
•	Custom RecyclerView adapter.
•	Each item should show the title and a play/pause button.
•	Handle logic to read the item aloud and prevent duplicates.

📄 MainActivity.kt
•	Initialize TextToSpeech.
•	Use lifecycleScope.launch to load RSS data in the background.
•	Set up RecyclerView.
•	Pass TTS instance to adapter.
•	Handle proper shutdown of TTS in onDestroy.
📄 activity_main.xml
•	Just a full-screen RecyclerView, for example



•	<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
📄 news_item.xml
•	Use a horizontal layout with:
o	TextView for the title
o	ImageButton for play/pause
•	Style it cleanly with card or padding.









<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:card_view="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="4dp"
    card_view:cardCornerRadius="6dp"
    card_view:cardElevation="2dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="12dp"
        android:gravity="center_vertical">

        <TextView
            android:id="@+id/titleTextView"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:textColor="#000000"
            android:textSize="16sp"
            android:maxLines="2"
            android:ellipsize="end" />

        <ImageButton
            android:id="@+id/playPauseButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="@android:color/transparent"
            android:src="@android:drawable/ic_media_play"
            android:contentDescription="Play/Pause" />
    </LinearLayout>
</androidx.cardview.widget.CardView>
